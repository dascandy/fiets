std::regex should be deprecated starting in C++23

| Document # | DxxxxR0 |
| Date | 2020-02-16 |
| Project |	Programming Language C++ |
| Targeted subgroups | SG16, EWG, CWG |
| Ship vehicle | C++23 |
| Reply-to | Peter Bindels <dascandy@gmail.com> |
| | Peter Brett <pbrett@cadence.com> |
| | Hana Dusíková <hanicka@hanicka.net> |

# Abstract

std::regex is a type that was introduced in C++11. It has performance in all implementations that is very suboptimal compared to contemporary regex engines. The implementation requires mishandling Unicode in fundamental ways. Any attempt to fix this is being met with strong resistance on basis of ABI breakage. Papers to accomplish this still take up committee time in processing. There are new proposals for regular expression engines in C++23 and up that handle all these issues, and are more widely applicable than std::regex currently is and can be.

As a whole std::regex is a type that, as a user, you are much better off avoiding altogether. Its performance is bad and its behavior is wrong. We believe that we are better off informing users and potential paper authors about this information up-front. 

# Goal of this paper

The goal of this paper is to deprecate std::regex in C++23. We believe this is the correct cause of action because of the following:

- std::regex is fundamentally unable to match Unicode in either 8-bit or 16-bit character sets. All character sets in common use as interchange formats are 8-bit or 16-bit.
- The performance of implementations in all common compilers are far from optimal, and in some cases prohibitively slow.
- Current implementations have a large enough problem with changing the implementation even a minute bit that they are very likely to either veto any change, or keep it as a defect in their implementation until the next ABI break on that platform (which in experience amounts to order-of-size a decade).

We are proposing to not remove std::regex in the C++23 timeframe, nor in one soon after:

- std::regex is not unusable in restricted domains.
- Its performance is acceptable to some programs.
- Customers that have shipped software with these implementations, accepting these restrictions and dangers, should not be unduly laden with the task of modifying their program before we have a proper replacement.

In analogy, std::regex is in a similar position to std::auto_ptr in the 2007-2008 timeframe. If we had had a release planned for 2008, a similar paper would have argued for deprecating it in (hypothetical) C++08, while only providing a replacement in C++11. The meaning of the deprecation is:

- This type has problems.
- You are better off not using this, or using something in a non-standard library
- Papers submitted to fix this type in-place are not able to get through the standard committee, and we are hoping to spend time on the replacement rather than re-investigating a possible tweak to the existing type.

# Problems with std::regex in more detail

## Unicode matching

## Performance

## ABI issues with fixes


# Proposed current resolution

## Consideration for current users


